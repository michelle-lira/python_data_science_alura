{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-644a44f3-e7bc-4a36-9d45-c9a8cfc0e9a0.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"markdown","id":"0c2b75","input":"## Fim","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"3fcdf0","input":"## Exercícios","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"936952","input":"#### 01 - Testando moedas\n\nSuponha que estejamos testando as moedas que serão utilizadas por árbitros de futebol nas competições da Copa do Mundo.    \nAtualmente, estas moedas são personalizadas e utilizadas em certos momentos dos jogos para decidir,    \nna sorte, uma disputa. Nosso objetivo é verificar se as moedas que serão utilizadas nas competições não são viciadas.\n\nPara isso testes foram realizados com cinco moedas e os resultados foram os seguintes:","pos":10,"type":"cell"}
{"cell_type":"markdown","id":"96388a","input":"<font color='magenta'>__\\o/ Surpresaaa:     \n    Vamos aprender um macete, mais simples do que usar o drop_duplicates()__</font>","pos":0.5,"type":"cell"}
{"cell_type":"markdown","id":"fcc21b","input":"# Contadores","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ff5ca7","input":"Acima, temos o resultado de 50 lançamentos de cada moeda (m1, m2, m3, m4 e m5), onde c representa a ocorrência do evento CARA e C representa a ocorrência do evento COROA.\n\nPara tirarmos nossas conclusões, precisamos montar o seguinte DataFrame:\n```\n\tFaces\tm1\tm2\tm3\tm4\tm5\nC\tCoroa\tFreq. C\tFreq. C\tFreq. C\tFreq. C\tFreq. C\nc\tCara\tFreq. c\tFreq. c\tFreq. c\tFreq. c\tFreq. c\n```\nOnde Freq. C e Freq. c são, respectivamente, as frequências de COROAS e de CARAS em cada teste.\n\nAssinale a opção que mostra o código necessário para realizar tal tarefa.\n","pos":12,"type":"cell"}
{"end":1627004643686,"exec_count":1,"id":"aa6932","input":"import pandas as pd","kernel":"python3","pos":1,"start":1627004643335,"state":"done","type":"cell"}
{"end":1627004860802,"exec_count":2,"id":"0575a6","input":"s = pd.Series(list('asdaesdaesdasesda'))\ns","kernel":"python3","output":{"0":{"data":{"text/plain":"0     a\n1     s\n2     d\n3     a\n4     e\n5     s\n6     d\n7     a\n8     e\n9     s\n10    d\n11    a\n12    s\n13    e\n14    s\n15    d\n16    a\ndtype: object"},"exec_count":2}},"pos":2,"start":1627004860797,"state":"done","type":"cell"}
{"end":1627005120227,"exec_count":6,"id":"7cd483","input":"dados.head(10)","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Tipo</th>\n      <th>Bairro</th>\n      <th>Quartos</th>\n      <th>Vagas</th>\n      <th>Suites</th>\n      <th>Area</th>\n      <th>Valor</th>\n      <th>Condominio</th>\n      <th>IPTU</th>\n      <th>Valor m2</th>\n      <th>Tipo Agregado</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Apartamento</td>\n      <td>Centro</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>15</td>\n      <td>800.0</td>\n      <td>390.0</td>\n      <td>20.0</td>\n      <td>53.33</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Apartamento</td>\n      <td>Higienópolis</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>48</td>\n      <td>800.0</td>\n      <td>230.0</td>\n      <td>0.0</td>\n      <td>16.67</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Apartamento</td>\n      <td>Cachambi</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>50</td>\n      <td>1300.0</td>\n      <td>301.0</td>\n      <td>17.0</td>\n      <td>26.00</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Apartamento</td>\n      <td>Grajaú</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>70</td>\n      <td>1500.0</td>\n      <td>642.0</td>\n      <td>74.0</td>\n      <td>21.43</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Apartamento</td>\n      <td>Lins de Vasconcelos</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>90</td>\n      <td>1500.0</td>\n      <td>455.0</td>\n      <td>14.0</td>\n      <td>16.67</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Apartamento</td>\n      <td>Copacabana</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>40</td>\n      <td>2000.0</td>\n      <td>561.0</td>\n      <td>50.0</td>\n      <td>50.00</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Apartamento</td>\n      <td>Freguesia (Jacarepaguá)</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>54</td>\n      <td>950.0</td>\n      <td>300.0</td>\n      <td>28.0</td>\n      <td>17.59</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Apartamento</td>\n      <td>Barra da Tijuca</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>67</td>\n      <td>1700.0</td>\n      <td>589.0</td>\n      <td>147.0</td>\n      <td>25.37</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Apartamento</td>\n      <td>Tijuca</td>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>110</td>\n      <td>1900.0</td>\n      <td>700.0</td>\n      <td>138.0</td>\n      <td>17.27</td>\n      <td>Apartamento</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Apartamento</td>\n      <td>Olaria</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>68</td>\n      <td>1000.0</td>\n      <td>670.0</td>\n      <td>0.0</td>\n      <td>14.71</td>\n      <td>Apartamento</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"          Tipo                   Bairro  Quartos  Vagas  Suites  Area   Valor  \\\n0  Apartamento                   Centro        1      0       0    15   800.0   \n1  Apartamento             Higienópolis        1      0       0    48   800.0   \n2  Apartamento                 Cachambi        2      0       0    50  1300.0   \n3  Apartamento                   Grajaú        2      1       0    70  1500.0   \n4  Apartamento      Lins de Vasconcelos        3      1       1    90  1500.0   \n5  Apartamento               Copacabana        1      0       1    40  2000.0   \n6  Apartamento  Freguesia (Jacarepaguá)        3      0       0    54   950.0   \n7  Apartamento          Barra da Tijuca        2      1       1    67  1700.0   \n8  Apartamento                   Tijuca        2      1       0   110  1900.0   \n9  Apartamento                   Olaria        3      1       0    68  1000.0   \n\n   Condominio   IPTU  Valor m2 Tipo Agregado  \n0       390.0   20.0     53.33   Apartamento  \n1       230.0    0.0     16.67   Apartamento  \n2       301.0   17.0     26.00   Apartamento  \n3       642.0   74.0     21.43   Apartamento  \n4       455.0   14.0     16.67   Apartamento  \n5       561.0   50.0     50.00   Apartamento  \n6       300.0   28.0     17.59   Apartamento  \n7       589.0  147.0     25.37   Apartamento  \n8       700.0  138.0     17.27   Apartamento  \n9       670.0    0.0     14.71   Apartamento  "},"exec_count":6}},"pos":6,"start":1627005120207,"state":"done","type":"cell"}
{"end":1627005229577,"exec_count":7,"id":"bb5d9a","input":"dados.Tipo.unique()","kernel":"python3","output":{"0":{"data":{"text/plain":"array(['Apartamento', 'Casa', 'Casa de Condomínio', 'Casa de Vila',\n       'Quitinete'], dtype=object)"},"exec_count":7}},"pos":7,"start":1627005229571,"state":"done","type":"cell"}
{"end":1627005517360,"exec_count":10,"id":"dcfab6","input":"\"\"\"\nCom este macete o nosso relatório anterior (para contar registros por Tipo)\nficaria concluído bem mais rápido :-)\n\"\"\"\ndados.Tipo.value_counts()","kernel":"python3","output":{"0":{"data":{"text/plain":"Apartamento           16923\nCasa de Condomínio      964\nCasa                    898\nQuitinete               813\nCasa de Vila            233\nName: Tipo, dtype: int64"},"exec_count":10}},"pos":8,"start":1627005517355,"state":"done","type":"cell"}
{"end":1627005711934,"exec_count":11,"id":"7ecb27","input":"m1 = 'CCcCCccCCCccCcCccCcCcCCCcCCcccCCcCcCcCcccCCcCcccCc'\nm2 = 'CCCCCccCccCcCCCCccCccccCccCccCCcCccCcCcCCcCccCccCc'\nm3 = 'CccCCccCcCCCCCCCCCCcccCccCCCCCCccCCCcccCCCcCCcccCC'\nm4 = 'cCCccCCccCCccCCccccCcCcCcCcCcCcCCCCccccCCCcCCcCCCC'\nm5 = 'CCCcCcCcCcCCCcCCcCcCCccCcCCcccCccCCcCcCcCcCcccccCc'","kernel":"python3","pos":11,"start":1627005711929,"state":"done","type":"cell"}
{"end":1627006036856,"exec_count":20,"id":"da613b","input":"# Alternativa D: Alternativa errada!\n\"\"\"\nObserve que o DataFrame df não foi previamente definido.\n\"\"\"\n\neventos = {'m1': list(m1),\n            'm2': list(m2),\n            'm3': list(m3),\n            'm4': list(m4),\n            'm5': list(m5)}\nmoedas = pd.DataFrame(eventos)\nfor item in moedas:\n    df = pd.concat([df, moedas[item].value_counts()], \n                    axis = 1)\ndf","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Faces</th>\n      <th>m1</th>\n      <th>m2</th>\n      <th>m3</th>\n      <th>m4</th>\n      <th>m5</th>\n      <th>m1</th>\n      <th>m2</th>\n      <th>m3</th>\n      <th>m4</th>\n      <th>...</th>\n      <th>m1</th>\n      <th>m2</th>\n      <th>m3</th>\n      <th>m4</th>\n      <th>m5</th>\n      <th>m1</th>\n      <th>m2</th>\n      <th>m3</th>\n      <th>m4</th>\n      <th>m5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>c</th>\n      <td>Cara</td>\n      <td>25</td>\n      <td>26</td>\n      <td>19</td>\n      <td>23</td>\n      <td>25</td>\n      <td>25</td>\n      <td>26</td>\n      <td>19</td>\n      <td>23</td>\n      <td>...</td>\n      <td>25</td>\n      <td>26</td>\n      <td>19</td>\n      <td>23</td>\n      <td>25</td>\n      <td>25</td>\n      <td>26</td>\n      <td>19</td>\n      <td>23</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>C</th>\n      <td>Coroa</td>\n      <td>25</td>\n      <td>24</td>\n      <td>31</td>\n      <td>27</td>\n      <td>25</td>\n      <td>25</td>\n      <td>24</td>\n      <td>31</td>\n      <td>27</td>\n      <td>...</td>\n      <td>25</td>\n      <td>24</td>\n      <td>31</td>\n      <td>27</td>\n      <td>25</td>\n      <td>25</td>\n      <td>24</td>\n      <td>31</td>\n      <td>27</td>\n      <td>25</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows × 26 columns</p>\n</div>","text/plain":"   Faces  m1  m2  m3  m4  m5  m1  m2  m3  m4  ...  m1  m2  m3  m4  m5  m1  m2  \\\nc   Cara  25  26  19  23  25  25  26  19  23  ...  25  26  19  23  25  25  26   \nC  Coroa  25  24  31  27  25  25  24  31  27  ...  25  24  31  27  25  25  24   \n\n   m3  m4  m5  \nc  19  23  25  \nC  31  27  25  \n\n[2 rows x 26 columns]"},"exec_count":20}},"pos":16,"start":1627006036839,"state":"done","type":"cell"}
{"end":1627006100752,"exec_count":22,"id":"992774","input":"# Alternativa C: Alternativa errada!\n\"\"\"\nO método sum() gera uma concatenação quando aplicado em variáveis tipo string.\n\neventos = {'m1': list(m1),\n            'm2': list(m2),\n            'm3': list(m3),\n            'm4': list(m4),\n            'm5': list(m5)}\nmoedas = pd.DataFrame(eventos)\ndf = pd.DataFrame(data = ['Cara', 'Coroa'],\n                    index = ['c', 'C'],\n                    columns = ['Faces'])\nfor item in moedas:\n    df = pd.concat([df, moedas[item].sum()],\n                    axis = 1)\ndf\n\"\"\"","kernel":"python3","output":{"0":{"data":{"text/plain":"\"\\nO método sum() gera uma concatenação quando aplicado em variáveis tipo string.\\n\\neventos = {'m1': list(m1),\\n            'm2': list(m2),\\n            'm3': list(m3),\\n            'm4': list(m4),\\n            'm5': list(m5)}\\nmoedas = pd.DataFrame(eventos)\\ndf = pd.DataFrame(data = ['Cara', 'Coroa'],\\n                    index = ['c', 'C'],\\n                    columns = ['Faces'])\\nfor item in moedas:\\n    df = pd.concat([df, moedas[item].sum()],\\n                    axis = 1)\\ndf\\n\""},"exec_count":22}},"pos":15,"start":1627006100746,"state":"done","type":"cell"}
{"end":1627006137155,"exec_count":23,"id":"e94587","input":"# Alternativa B: Alternativa correta!\n\"\"\"\nObserve que value_counts() é uma funcionalidade aplicável somente a Series e, por isso, precisamos executar o código para cada coluna do DataFrame, individualmente.\n\"\"\"\n\neventos = {'m1': list(m1),\n            'm2': list(m2),\n            'm3': list(m3),\n            'm4': list(m4),\n            'm5': list(m5)}\nmoedas = pd.DataFrame(eventos)\ndf = pd.DataFrame(data = ['Cara', 'Coroa'],\n                    index = ['c', 'C'],\n                    columns = ['Faces'])\nfor item in moedas:\n    df = pd.concat([df, moedas[item].value_counts()],\n                    axis = 1)\ndf","kernel":"python3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Faces</th>\n      <th>m1</th>\n      <th>m2</th>\n      <th>m3</th>\n      <th>m4</th>\n      <th>m5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>c</th>\n      <td>Cara</td>\n      <td>25</td>\n      <td>26</td>\n      <td>19</td>\n      <td>23</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>C</th>\n      <td>Coroa</td>\n      <td>25</td>\n      <td>24</td>\n      <td>31</td>\n      <td>27</td>\n      <td>25</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Faces  m1  m2  m3  m4  m5\nc   Cara  25  26  19  23  25\nC  Coroa  25  24  31  27  25"},"exec_count":23}},"pos":14,"start":1627006137148,"state":"done","type":"cell"}
{"end":1627006178786,"exec_count":24,"id":"6a63e2","input":"# Alternativa A: Alternativa errada!\n\"\"\"\nA forma de criação do DataFrame de eventos não está correta. Utilize list() para criar uma listagem de caracteres a partir de uma string.\n\neventos = {'m1': m1,\n            'm2': m2,\n            'm3': m3,\n            'm4': m4,\n            'm5': m5}\nmoedas = pd.DataFrame(eventos)\ndf = pd.DataFrame(data = ['Cara', 'Coroa'],\n                    index = ['c', 'C'],\n                    columns = ['Faces'])\nfor item in moedas:\n    df = pd.concat([df, moedas[item].value_counts()],\n                    axis = 1)\ndf\n\"\"\"","kernel":"python3","output":{"0":{"data":{"text/plain":"\"\\nA forma de criação do DataFrame de eventos não está correta. Utilize list() para criar uma listagem de caracteres a partir de uma string.\\n\\neventos = {'m1': m1,\\n            'm2': m2,\\n            'm3': m3,\\n            'm4': m4,\\n            'm5': m5}\\nmoedas = pd.DataFrame(eventos)\\ndf = pd.DataFrame(data = ['Cara', 'Coroa'],\\n                    index = ['c', 'C'],\\n                    columns = ['Faces'])\\nfor item in moedas:\\n    df = pd.concat([df, moedas[item].value_counts()],\\n                    axis = 1)\\ndf\\n\""},"exec_count":24}},"pos":13,"start":1627006178781,"state":"done","type":"cell"}
{"exec_count":3,"id":"64dc0f","input":"# Checando os valores únicos\ns.unique()","kernel":"python3","output":{"0":{"data":{"text/plain":"array(['a', 's', 'd', 'e'], dtype=object)"},"exec_count":3}},"pos":3,"state":"done","type":"cell"}
{"exec_count":4,"id":"ce567e","input":"# Quero saber quantas vezes usei as letras descritas acima, uma distribuição de frequências\ns.value_counts()","kernel":"python3","output":{"0":{"data":{"text/plain":"a    5\ns    5\nd    4\ne    3\ndtype: int64"},"exec_count":4}},"pos":4,"state":"done","type":"cell"}
{"exec_count":5,"id":"e76108","input":"# Vamos abrir um arquivo de mesmo nome, mas apenas parecido com o do projeto anterior\ndados = pd.read_csv('dados/aluguel.csv', sep = ';')","kernel":"python3","pos":5,"state":"done","type":"cell"}
{"last_load":1627004616649,"type":"file"}