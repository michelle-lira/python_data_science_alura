{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-061ded8c-721a-428f-b1d7-971c0fb65dc2.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":105,"id":"50c529","input":"# Código 2 (Nomeação dos index e colunas incorreta)\ndados = [('A', 'B'), ('C', 'D')]\ndf = pd.DataFrame(dados, columns = ['L1', 'L2'],  index = ['C1', 'C2'])\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>L1</th>\n      <th>L2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>C1</th>\n      <td>A</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>C2</th>\n      <td>C</td>\n      <td>D</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   L1 L2\nC1  A  B\nC2  C  D"},"exec_count":105,"output_type":"execute_result"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":107,"id":"70d845","input":"# Código 4 (Correto!)\ndados = {'A': {'X': 1, 'Y': 3}, 'B': {'X': 2, 'Y': 4}}\ndf = pd.DataFrame(dados)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X</th>\n      <td>1</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B\nX  1  2\nY  3  4"},"exec_count":107,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":108,"id":"72ad9a","input":"# Código 1 (Concatenação errada)\ndf1 = pd.DataFrame({'A': {'X': 1}, 'B': {'X': 2}})\ndf2 = pd.DataFrame({'C': {'X': 3}, 'D': {'X': 4}})\npd.concat([df1, df2])","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C  D\nX  1  2  3  4"},"exec_count":108,"output_type":"execute_result"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":109,"id":"2fd4fd","input":"# Correção da concatenação do código 1: inserir o axis\npd.concat([df1, df2], axis = 1)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C  D\nX  1  2  3  4"},"exec_count":109,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":111,"id":"ae154e","input":"# Correção do código 2\ndados = [('A', 'B'), ('C', 'D')]\ndf = pd.DataFrame(dados, index = ['L1', 'L2'],  columns = ['C1', 'C2'])\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>C1</th>\n      <th>C2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>L1</th>\n      <td>A</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>L2</th>\n      <td>C</td>\n      <td>D</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   C1 C2\nL1  A  B\nL2  C  D"},"exec_count":111,"output_type":"execute_result"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":112,"id":"b5a75b","input":"# Código 3 (Correto!)\ndados = [[1, 2, 3], [4, 5, 6]]\nindex = 'X,Y'.split(',')\ncolumns = list('CBA')[::-1]\ndf = pd.DataFrame(dados, index, columns)\ndf","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Y</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\nX  1  2  3\nY  4  5  6"},"exec_count":112,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"f0b1a1","input":"import pandas as pd","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"0947dd","input":"data = [1, 2, 3, 4, 5]","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"4764ae","input":"# Criando uma Series\ns = pd.Series(data)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"b2b770","input":"s","output":{"0":{"data":{"text/plain":"0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64"},"exec_count":51,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"4bd43b","input":"index = ['Linha-' + str(i) for i in range(5)]","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"a9ba39","input":"s = pd.Series(data = data, index = index)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"30b81d","input":"s","output":{"0":{"data":{"text/plain":"Linha-0    1\nLinha-1    2\nLinha-2    3\nLinha-3    4\nLinha-4    5\ndtype: int64"},"exec_count":54,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"439465","input":"data = {'Linha-' + str(i) : i + 1 for i in range(5)}","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"e03c5b","input":"data","output":{"0":{"data":{"text/plain":"{'Linha-0': 1, 'Linha-1': 2, 'Linha-2': 3, 'Linha-3': 4, 'Linha-4': 5}"},"exec_count":56,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"e7648b","input":"# Criando nossa Series\ns = pd.Series(data)\n\n\"\"\"\n>>> Obs: Agora não precisamos mais passar o index porque\no index vai ser composto pelas chaves do dicionário.\n\"\"\"","output":{"0":{"data":{"text/plain":"'\\n>>> Obs: Agora não precisamos mais passar o index porque\\no index vai ser composto pelas chaves do dicionário.\\n'"},"exec_count":57,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"5f7dd3","input":"s","output":{"0":{"data":{"text/plain":"Linha-0    1\nLinha-1    2\nLinha-2    3\nLinha-3    4\nLinha-4    5\ndtype: int64"},"exec_count":58,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"ab24cd","input":"s1 = s + 2","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":60,"id":"a4bf61","input":"s1","output":{"0":{"data":{"text/plain":"Linha-0    3\nLinha-1    4\nLinha-2    5\nLinha-3    6\nLinha-4    7\ndtype: int64"},"exec_count":60,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"71076e","input":"s2 = s + s1\ns2","output":{"0":{"data":{"text/plain":"Linha-0     4\nLinha-1     6\nLinha-2     8\nLinha-3    10\nLinha-4    12\ndtype: int64"},"exec_count":61,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"5d2a03","input":"s3 = s * s1\ns3","output":{"0":{"data":{"text/plain":"Linha-0     3\nLinha-1     8\nLinha-2    15\nLinha-3    24\nLinha-4    35\ndtype: int64"},"exec_count":62,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"2cb083","input":"s4 = s2 / s\ns4","output":{"0":{"data":{"text/plain":"Linha-0    4.000000\nLinha-1    3.000000\nLinha-2    2.666667\nLinha-3    2.500000\nLinha-4    2.400000\ndtype: float64"},"exec_count":63,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"f92006","input":"s5 = s / s2\ns5","output":{"0":{"data":{"text/plain":"Linha-0    0.250000\nLinha-1    0.333333\nLinha-2    0.375000\nLinha-3    0.400000\nLinha-4    0.416667\ndtype: float64"},"exec_count":64,"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"feb1b9","input":"data = [[1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]]\ndata","output":{"0":{"data":{"text/plain":"[[1, 2, 3], [4, 5, 6], [7, 8, 9]]"},"exec_count":65,"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"17cc18","input":"# Criando um DataFrame a partir de uma lista de listas\ndf_1 = pd.DataFrame(data) # poderia fazer (data = data) que daria o mesmo resultado\ndf_1","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   0  1  2\n0  1  2  3\n1  4  5  6\n2  7  8  9"},"exec_count":66,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"816692","input":"# Criando um index para o DataFrame\nindex = ['Linha-' + str(i) for i in range(3)]\nindex","output":{"0":{"data":{"text/plain":"['Linha-0', 'Linha-1', 'Linha-2']"},"exec_count":67,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"e71aec","input":"# Atribuindo ao DataFrame o index criado\ndf_1 = pd.DataFrame(data = data, index = index)\ndf_1","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         0  1  2\nLinha-0  1  2  3\nLinha-1  4  5  6\nLinha-2  7  8  9"},"exec_count":68,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"cf3697","input":"# Criando um range com os novos nomes das colunas\ncolumns = ['Coluna-' + str(i) for i in range(3)]\ncolumns","output":{"0":{"data":{"text/plain":"['Coluna-0', 'Coluna-1', 'Coluna-2']"},"exec_count":69,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"7ddf97","input":"# Atribuindo ao DataFrame os nomes das colunas\ndf_1 = pd.DataFrame(data = data, index = index, columns = columns)\ndf_1","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Coluna-0  Coluna-1  Coluna-2\nLinha-0         1         2         3\nLinha-1         4         5         6\nLinha-2         7         8         9"},"exec_count":70,"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"c30879","input":"# Criando um DataFrame a partir de um dicionário de dicionários\ndf_2 = pd.DataFrame(data)\ndf_2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Coluna-0  Coluna-1  Coluna-2\nLinha-0         1         2         3\nLinha-1         4         5         6\nLinha-2         7         8         9"},"exec_count":72,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":73,"id":"44ffeb","input":"data = [(1, 2, 3),\n        (4, 5, 6),\n        (7, 8, 9)]\ndata","output":{"0":{"data":{"text/plain":"[(1, 2, 3), (4, 5, 6), (7, 8, 9)]"},"exec_count":73,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"8307aa","input":"# Criando um DataFrame a partir de uma lista de tuplas\ndf_3 = pd.DataFrame(data = data, index = index, columns = columns)\ndf_3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Coluna-0  Coluna-1  Coluna-2\nLinha-0         1         2         3\nLinha-1         4         5         6\nLinha-2         7         8         9"},"exec_count":74,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"5542c8","input":"df_1[df_1 > 0] = 'A'\ndf_1","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2\nLinha-0        A        A        A\nLinha-1        A        A        A\nLinha-2        A        A        A"},"exec_count":75,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":76,"id":"4974c9","input":"df_2[df_2 > 0] = 'B'\ndf_2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>B</td>\n      <td>B</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>B</td>\n      <td>B</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>B</td>\n      <td>B</td>\n      <td>B</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2\nLinha-0        B        B        B\nLinha-1        B        B        B\nLinha-2        B        B        B"},"exec_count":76,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":77,"id":"81d6d5","input":"df_3[df_3 > 0] = 'C'\ndf_3","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2\nLinha-0        C        C        C\nLinha-1        C        C        C\nLinha-2        C        C        C"},"exec_count":77,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":80,"id":"f0a931","input":"\"\"\"\nSe as colunas e linhas estivessem, por exemplo, nomeadas dessa maneira:\ndata = {'Coluna_0' : {'Linha_0' : 1, 'Linha_1' : 4, 'Linha_2' : 7},\n        'Coluna_1' : {'Linha_0' : 2, 'Linha_1' : 5, 'Linha_2' : 8},\n        'Coluna_2' : {'Linha_0' : 3, 'Linha_1' : 6, 'Linha_2' : 9}}\ndata\n\nTeríamos resultados NaN, porque encontraríamos index e nomes de colunas diferentes\n\"\"\"\n\ndata = {'Coluna-0' : {'Linha-0' : 1, 'Linha-1' : 4, 'Linha-2' : 7},\n        'Coluna-1' : {'Linha-0' : 2, 'Linha-1' : 5, 'Linha-2' : 8},\n        'Coluna-2' : {'Linha-0' : 3, 'Linha-1' : 6, 'Linha-2' : 9}}\ndata","output":{"0":{"data":{"text/plain":"{'Coluna-0': {'Linha-0': 1, 'Linha-1': 4, 'Linha-2': 7},\n 'Coluna-1': {'Linha-0': 2, 'Linha-1': 5, 'Linha-2': 8},\n 'Coluna-2': {'Linha-0': 3, 'Linha-1': 6, 'Linha-2': 9}}"},"exec_count":80,"output_type":"execute_result"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"e87a37","input":"# Corrigindo o caracter: substituindo o underscore pelo traço\ndata = {'Coluna-0' : {'Linha-0' : 1, 'Linha-1' : 4, 'Linha-2' : 7},\n        'Coluna-1' : {'Linha-0' : 2, 'Linha-1' : 5, 'Linha-2' : 8},\n        'Coluna-2' : {'Linha-0' : 3, 'Linha-1' : 6, 'Linha-2' : 9}}\ndf_2 = pd.DataFrame(data)\ndf_2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Coluna-0  Coluna-1  Coluna-2\nLinha-0         1         2         3\nLinha-1         4         5         6\nLinha-2         7         8         9"},"exec_count":83,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"78156f","input":"# Retorno correto da concatenação\ndf_4 = pd.concat([df_1, df_2, df_3])\ndf_4","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n    </tr>\n    <tr>\n      <th>Linha-0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Linha-0</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2\nLinha-0        A        A        A\nLinha-1        A        A        A\nLinha-2        A        A        A\nLinha-0        1        2        3\nLinha-1        4        5        6\nLinha-2        7        8        9\nLinha-0        C        C        C\nLinha-1        C        C        C\nLinha-2        C        C        C"},"exec_count":84,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"c7b193","input":"df_4 = pd.concat([df_1, df_2, df_3], axis = 1)\ndf_4","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2 Coluna-0 Coluna-1 Coluna-2 Coluna-0  \\\nLinha-0        A        A        A        1        2        3        C   \nLinha-1        A        A        A        4        5        6        C   \nLinha-2        A        A        A        7        8        9        C   \n\n        Coluna-1 Coluna-2  \nLinha-0        C        C  \nLinha-1        C        C  \nLinha-2        C        C  "},"exec_count":85,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":88,"id":"6c243c","input":"data = {'Coluna_0' : {'Linha_0' : 1, 'Linha_1' : 4, 'Linha_2' : 7},\n        'Coluna_1' : {'Linha_0' : 2, 'Linha_1' : 5, 'Linha_2' : 8},\n        'Coluna_2' : {'Linha_0' : 3, 'Linha_1' : 6, 'Linha_2' : 9}}\n\ndf_2 = pd.DataFrame(data)\ndf_2","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna_0</th>\n      <th>Coluna_1</th>\n      <th>Coluna_2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha_0</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Linha_1</th>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>Linha_2</th>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         Coluna_0  Coluna_1  Coluna_2\nLinha_0         1         2         3\nLinha_1         4         5         6\nLinha_2         7         8         9"},"exec_count":88,"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":89,"id":"b09c10","input":"# Teremos retorno not a number por causa do underscore\ndf_4 = pd.concat([df_1, df_2, df_3])\ndf_4","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n      <th>Coluna_0</th>\n      <th>Coluna_1</th>\n      <th>Coluna_2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha_0</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>Linha_1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>Linha_2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7.0</td>\n      <td>8.0</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>Linha-0</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2  Coluna_0  Coluna_1  Coluna_2\nLinha-0        A        A        A       NaN       NaN       NaN\nLinha-1        A        A        A       NaN       NaN       NaN\nLinha-2        A        A        A       NaN       NaN       NaN\nLinha_0      NaN      NaN      NaN       1.0       2.0       3.0\nLinha_1      NaN      NaN      NaN       4.0       5.0       6.0\nLinha_2      NaN      NaN      NaN       7.0       8.0       9.0\nLinha-0        C        C        C       NaN       NaN       NaN\nLinha-1        C        C        C       NaN       NaN       NaN\nLinha-2        C        C        C       NaN       NaN       NaN"},"exec_count":89,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":90,"id":"320320","input":"df_4 = pd.concat([df_1, df_2, df_3], axis = 1)\ndf_4","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n      <th>Coluna_0</th>\n      <th>Coluna_1</th>\n      <th>Coluna_2</th>\n      <th>Coluna-0</th>\n      <th>Coluna-1</th>\n      <th>Coluna-2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Linha-0</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-1</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha-2</th>\n      <td>A</td>\n      <td>A</td>\n      <td>A</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>C</td>\n      <td>C</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>Linha_0</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>3.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha_1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4.0</td>\n      <td>5.0</td>\n      <td>6.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>Linha_2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>7.0</td>\n      <td>8.0</td>\n      <td>9.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"        Coluna-0 Coluna-1 Coluna-2  Coluna_0  Coluna_1  Coluna_2 Coluna-0  \\\nLinha-0        A        A        A       NaN       NaN       NaN        C   \nLinha-1        A        A        A       NaN       NaN       NaN        C   \nLinha-2        A        A        A       NaN       NaN       NaN        C   \nLinha_0      NaN      NaN      NaN       1.0       2.0       3.0      NaN   \nLinha_1      NaN      NaN      NaN       4.0       5.0       6.0      NaN   \nLinha_2      NaN      NaN      NaN       7.0       8.0       9.0      NaN   \n\n        Coluna-1 Coluna-2  \nLinha-0        C        C  \nLinha-1        C        C  \nLinha-2        C        C  \nLinha_0      NaN      NaN  \nLinha_1      NaN      NaN  \nLinha_2      NaN      NaN  "},"exec_count":90,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"markdown","exec_count":0,"id":"065c30","input":"## Fim","pos":56,"type":"cell"}
{"cell_type":"markdown","id":"4a40c9","input":"## Series","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"7292a9","input":"# Criando Estruturas de Dados","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"7629f8","input":"## DataFrames","pos":22,"type":"cell"}
{"cell_type":"markdown","id":"7824d9","input":"## Operações com Series","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"929440","input":"__Saída 3__\n```\nOut [3]:\n\tA\tB\tC\nX\t1\t2\t3\nY\t4\t5\t6\n```","pos":52,"type":"cell"}
{"cell_type":"markdown","id":"ac79e0","input":"## Exercício\n\nTestar as saídas dos códigos exibidos na questão e marcar as saídas corretas","pos":45,"type":"cell"}
{"cell_type":"markdown","id":"b230d8","input":"Init signature:\npd.Series(\n    data=None,\n    index=None,\n    dtype: 'Dtype | None' = None,\n    name=None,\n    copy: 'bool' = False,\n    fastpath: 'bool' = False,\n)\nDocstring:     \nOne-dimensional ndarray with axis labels (including time series).\n\nLabels need not be unique but must be a hashable type. The object\nsupports both integer- and label-based indexing and provides a host of\nmethods for performing operations involving the index. Statistical\nmethods from ndarray have been overridden to automatically exclude\nmissing data (currently represented as NaN).\n\nOperations between Series (+, -, /, *, **) align values based on their\nassociated index values-- they need not be the same length. The result\nindex will be the sorted union of the two indexes.\n\nParameters\n----------\ndata : array-like, Iterable, dict, or scalar value\n    Contains data stored in Series. If data is a dict, argument order is\n    maintained.\nindex : array-like or Index (1d)\n    Values must be hashable and have the same length as `data`.\n    Non-unique index values are allowed. Will default to\n    RangeIndex (0, 1, 2, ..., n) if not provided. If data is dict-like\n    and index is None, then the keys in the data are used as the index. If the\n    index is not None, the resulting Series is reindexed with the index values.\ndtype : str, numpy.dtype, or ExtensionDtype, optional\n    Data type for the output Series. If not specified, this will be\n    inferred from `data`.\n    See the :ref:`user guide <basics.dtypes>` for more usages.\nname : str, optional\n    The name to give to the Series.\ncopy : bool, default False\n    Copy input data. Only affects Series or 1d ndarray input. See examples.\n\nExamples\n--------\nConstructing Series from a dictionary with an Index specified\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['a', 'b', 'c'])\n>>> ser\na   1\nb   2\nc   3\ndtype: int64\n\nThe keys of the dictionary match with the Index values, hence the Index\nvalues have no effect.\n\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> ser = pd.Series(data=d, index=['x', 'y', 'z'])\n>>> ser\nx   NaN\ny   NaN\nz   NaN\ndtype: float64\n\nNote that the Index is first build with the keys from the dictionary.\nAfter this the Series is reindexed with the given Index values, hence we\nget all NaN as a result.\n\nConstructing Series from a list with `copy=False`.\n\n>>> r = [1, 2]\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\n[1, 2]\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `copy` of\nthe original data even though `copy=False`, so\nthe data is unchanged.\n\nConstructing Series from a 1d ndarray with `copy=False`.\n\n>>> r = np.array([1, 2])\n>>> ser = pd.Series(r, copy=False)\n>>> ser.iloc[0] = 999\n>>> r\narray([999,   2])\n>>> ser\n0    999\n1      2\ndtype: int64\n\nDue to input data type the Series has a `view` on\nthe original data, so\nthe data is changed as well.\nFile:           /usr/local/lib/python3.8/dist-packages/pandas/core/series.py\nType:           type\nSubclasses:     SubclassedSeries\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"b54a04","input":"__Saída 1__\n```\nOut [4]:\n\tA\tB\tC\tD\nX\t1\t2\t3\t4\n```","pos":46,"type":"cell"}
{"cell_type":"markdown","id":"b58443","input":"Init signature:\npd.DataFrame(\n    data=None,\n    index: 'Axes | None' = None,\n    columns: 'Axes | None' = None,\n    dtype: 'Dtype | None' = None,\n    copy: 'bool | None' = None,\n)\nDocstring:     \nTwo-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, dataclass or list-like objects. If\n    data is a dict, column order follows insertion-order.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame when data does not have them,\n    defaulting to RangeIndex(0, 1, 2, ..., n). If data contains column labels,\n    will perform column selection instead.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool or None, default None\n    Copy data from inputs.\n    For dict data, the default of None behaves like ``copy=True``.  For DataFrame\n    or 2d ndarray input, the default of None behaves like ``copy=False``.\n\n    .. versionchanged:: 1.3.0\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv : Read a comma-separated values (csv) file into DataFrame.\nread_table : Read general delimited file into DataFrame.\nread_clipboard : Read text from clipboard into DataFrame.\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n\nConstructing DataFrame from a numpy ndarray that has labeled columns:\n\n>>> data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],\n...                 dtype=[(\"a\", \"i4\"), (\"b\", \"i4\"), (\"c\", \"i4\")])\n>>> df3 = pd.DataFrame(data, columns=['c', 'a'])\n...\n>>> df3\n   c  a\n0  3  1\n1  6  4\n2  9  7\n\nConstructing DataFrame from dataclass:\n\n>>> from dataclasses import make_dataclass\n>>> Point = make_dataclass(\"Point\", [(\"x\", int), (\"y\", int)])\n>>> pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])\n   x  y\n0  0  0\n1  0  3\n2  2  3\nFile:           /usr/local/lib/python3.8/dist-packages/pandas/core/frame.py\nType:           type\nSubclasses:     SubclassedDataFrame\n","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"c31a79","input":"#### É possível somar, multiplicar, subtrair, etc, duas Series que tenham o mesmo index\n\nSe for encontrada alguma linha com tipo de dados diferentes, será retornado um NaN","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"dd6856","input":"## Concatenando DataFrames","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"ebaf0f","input":"__Exemplo com um retorno NaN:__","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"f465d5","input":"__Saída 2__\n```\nOut [2]:\n\tC1\tC2\nL1\tA\tC\nL2\tB\tD\n```","pos":49,"type":"cell"}
{"cell_type":"markdown","id":"fd3c16","input":"__Saída 4__\n```Out [1]:\n\tA\tB\nX\t1\t2\nY\t3\t4\n```","pos":54,"type":"cell"}
{"id":0,"time":1626972117255,"type":"user"}
{"last_load":1626971939953,"type":"file"}